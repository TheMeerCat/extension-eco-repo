service: carbon-emissions-api

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  serverless-offline:
    httpPort: 3003
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
    stages:
      - dev

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-dynamodb-local
  - serverless-offline

provider:
  name: aws
  runtime: nodejs16.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  apiGateway:
    minimumCompressionSize: 1024
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    LOG_TABLE: Todos-${self:provider.stage}

functions:
  createLogStreamItem:
    handler: src/functions/logstream/create.handler
    events:
      - http:
          method: post
          path: /emissions
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.LOG_TABLE}
  getLogStreamItems:
    handler: src/functions/logstream/get.handler
    events:
      - http:
          method: get
          path: /emissions
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.LOG_TABLE}

resources:
  Resources:
    TodosDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.LOG_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
